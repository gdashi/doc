var request = require('request');
var dbhd   = require('./dboper');
var mqhd   = require('./mqoper');
var basic  = require('./basic');
var cons = require('./constants');
var devModel = require('./devinfo');

var DEV_KEY           = 'scenarios:';
var dbmongo = null;

exports.isDevBind2User = isDevBind2User;
exports.isDevBind2UserForWebserver = isDevBind2User;

function connectMongodb()
{
    var mongoConnParas;
    if (process.env.NODE_ENV == 'production') {
        mongoConnParas = cons.sceproductMongoParas;
    }else if (process.env.NODE_ENV == 'v3test') {
        mongoConnParas = cons.v3testMongoParas;
    }else {
        mongoConnParas = cons.scedefaultMongoParas;
    }

    dbmongo = devModel.createDevModel(mongoConnParas);

    dbmongo.on('disconnected', function() {
        dbmongo = null;
    });

}


// 该函数用于判断指定的设备是否绑定到指定的用户
function isDevBind2User(cookies, session, devSN, callback) {
    //如果是rd账户登录,可查看所有设备
    if (cookies && cookies.SSOAuth_Cookie){
        callback(null, true);
        return;
    }
    if (session && session.cas_user && session.cas_user.attributes && session.cas_user.attributes.name) {
        var tenantName = session.cas_user.attributes.name;
    }else {
        console.error('[USER]session.cas_user.user is undefined');
        console.error('[USER]session: ' + session);
        callback(null, false);
        return;
    }
    if (!devSN) {
        console.error('[USER]devSN is undefined');
        callback(null, false);
        return;
    }
    // 先到redis数据库查询,查不到或者不相等的话,再发消息查询
    getDevInfoFromRedis(devSN,getDevInfoFromMongo,function(reply,retCode) {
        var bBind = false;
        if(retCode && reply && reply.userName) {
            if(tenantName == reply.userName) {
                bBind = true;
            }
        }
        if(!bBind) {
            console.warn('[USER]dev bind relation is false. devSN = %s, response body: %s.', devSN, JSON.stringify(reply));
        }
        callback(null, bBind);
    });
};


exports.getDevUserInfos = function(devSN,callback) {

    getDevInfoFromRedis(devSN,getDevInfoFromMongo,callback)
}

exports.delDevInfoFromRedis = function(devSN,callback) {
    //该接口只有场景微服务调用更新redis数据  devSN已经保证是大写
    var redisKey = DEV_KEY + devSN;
    dbhd.redisClient.del(redisKey, function(err, reply) {
        if (err) {
            console.error('[USER]del devInfo from redis key/value [%s/%s] with error[%s]:' ,redisKey,reply,err);
        }
    });
}

function getDevInfoFromRedis(devSN,findDevInMongo,callback) {
    var upperdevSN = devSN.toUpperCase();
    if (dbhd.redisClient) {
        var redisKey = DEV_KEY + upperdevSN;
        dbhd.redisClient.get(redisKey, function(err, reply) {
            var response = reply && JSON.parse(reply);
            if (!err && response && response.userName) {
                console.log('[USER]user name from redis: ' + response.userName);
                callback(response, true);
            }else {
                findDevInMongo(upperdevSN, callback);
            }
        });
    }else {
        console.error('[USER]get devuser from redis fail. dbhd.redisClient is null, please check it. ' +
            'If you want to get a more fluent user experience, please ensure dbhd.redisClient is not null first.');
        findDevInMongo(upperdevSN, callback);
    }
}

function setDevInfo2Redis(devSN,doc) {
    if (dbhd.redisClient) {
        var redisKey = DEV_KEY + devSN;
        var result = JSON.stringify(doc);
        dbhd.redisClient.set(redisKey, result, function(err, reply){
            if (!err) {
                // 设置数据在redis数据库中的失效时间为11小时
                dbhd.redisClient.expire(redisKey, 39600);
            }else {
                console.error('[USER]set devuser to redis failed with error: %s. key = %s.', err, redisKey);
            }
        });
    }else {
        console.error('[USER]set devuser to redis fail. dbhd.redisClient is null, please check it. ' +
            'If you want to get a more fluent user experience, please ensure dbhd.redisClient is not null first.');
    }
}



function getDevInfoFromMongo(devSN, callback) {
    console.warn('[USER]getDevInfoFromMongo[%s]',devSN);
    if(!dbmongo)
    {
        connectMongodb();
    }
    devModel.getDevInfo(devSN,function(msg,reply) {
        if("success" == reply) {
            callback(msg, true);
            setDevInfo2Redis(devSN,msg);
        }
        else {
            callback(msg, false);
        }
    });
}
